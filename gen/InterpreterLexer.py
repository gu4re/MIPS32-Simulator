# Generated from /Users/diegopicazo/Documents/github/MIPS32Simulator/Interpreter.g4 by ANTLR 4.13.1
from library.antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,366,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,4,4,73,8,4,11,4,12,4,74,1,4,1,4,1,5,1,5,5,5,81,8,5,10,5,12,5,84,
        9,5,1,5,3,5,87,8,5,1,5,1,5,1,6,4,6,92,8,6,11,6,12,6,93,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,5,7,103,8,7,10,7,12,7,106,9,7,1,7,1,7,1,8,4,8,
        111,8,8,11,8,12,8,112,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,133,8,10,10,10,12,10,
        136,9,10,1,10,1,10,1,10,1,10,1,10,5,10,143,8,10,10,10,12,10,146,
        9,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,5,11,162,8,11,10,11,12,11,165,9,11,1,11,1,11,1,11,1,11,
        1,11,5,11,172,8,11,10,11,12,11,175,9,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,192,8,12,
        10,12,12,12,195,9,12,1,12,1,12,1,12,1,12,1,12,5,12,202,8,12,10,12,
        12,12,205,9,12,1,12,4,12,208,8,12,11,12,12,12,209,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,222,8,13,10,13,12,13,225,
        9,13,1,13,1,13,1,13,1,13,1,13,5,13,232,8,13,10,13,12,13,235,9,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,245,8,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,257,8,15,10,15,12,15,
        260,9,15,1,15,1,15,1,15,1,15,1,15,5,15,267,8,15,10,15,12,15,270,
        9,15,1,15,4,15,273,8,15,11,15,12,15,274,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,5,16,286,8,16,10,16,12,16,289,9,16,1,16,4,16,
        292,8,16,11,16,12,16,293,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,5,17,305,8,17,10,17,12,17,308,9,17,1,17,4,17,311,8,17,11,17,
        12,17,312,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,324,
        8,18,10,18,12,18,327,9,18,1,18,4,18,330,8,18,11,18,12,18,331,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,343,8,19,10,19,12,19,
        346,9,19,1,19,4,19,349,8,19,11,19,12,19,350,1,20,1,20,1,20,1,20,
        1,20,3,20,358,8,20,1,21,1,21,1,21,4,21,363,8,21,11,21,12,21,364,
        0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,0,23,0,25,
        0,27,0,29,11,31,0,33,0,35,0,37,0,39,0,41,12,43,13,1,0,7,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,3,0,48,57,65,90,97,122,1,0,34,34,1,0,
        48,57,3,0,97,97,116,116,118,118,2,0,65,90,97,122,392,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,29,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,53,1,0,0,0,5,59,1,0,0,0,7,65,
        1,0,0,0,9,72,1,0,0,0,11,78,1,0,0,0,13,91,1,0,0,0,15,97,1,0,0,0,17,
        110,1,0,0,0,19,114,1,0,0,0,21,122,1,0,0,0,23,151,1,0,0,0,25,180,
        1,0,0,0,27,211,1,0,0,0,29,244,1,0,0,0,31,246,1,0,0,0,33,276,1,0,
        0,0,35,295,1,0,0,0,37,314,1,0,0,0,39,333,1,0,0,0,41,357,1,0,0,0,
        43,359,1,0,0,0,45,46,5,46,0,0,46,47,5,97,0,0,47,48,5,115,0,0,48,
        49,5,99,0,0,49,50,5,105,0,0,50,51,5,105,0,0,51,52,5,122,0,0,52,2,
        1,0,0,0,53,54,5,46,0,0,54,55,5,119,0,0,55,56,5,111,0,0,56,57,5,114,
        0,0,57,58,5,100,0,0,58,4,1,0,0,0,59,60,5,46,0,0,60,61,5,100,0,0,
        61,62,5,97,0,0,62,63,5,116,0,0,63,64,5,97,0,0,64,6,1,0,0,0,65,66,
        5,46,0,0,66,67,5,116,0,0,67,68,5,101,0,0,68,69,5,120,0,0,69,70,5,
        116,0,0,70,8,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,
        72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,4,0,0,77,10,1,0,0,
        0,78,82,5,35,0,0,79,81,8,1,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,
        1,0,0,0,82,83,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,85,87,3,9,4,0,
        86,85,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,89,6,5,0,0,89,12,1,
        0,0,0,90,92,7,2,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,
        94,1,0,0,0,94,95,1,0,0,0,95,96,5,58,0,0,96,14,1,0,0,0,97,104,5,34,
        0,0,98,103,8,3,0,0,99,100,5,92,0,0,100,103,5,34,0,0,101,103,3,9,
        4,0,102,98,1,0,0,0,102,99,1,0,0,0,102,101,1,0,0,0,103,106,1,0,0,
        0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,
        0,107,108,5,34,0,0,108,16,1,0,0,0,109,111,7,4,0,0,110,109,1,0,0,
        0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,18,1,0,0,0,
        114,115,5,115,0,0,115,116,5,121,0,0,116,117,5,115,0,0,117,118,5,
        99,0,0,118,119,5,97,0,0,119,120,5,108,0,0,120,121,5,108,0,0,121,
        20,1,0,0,0,122,123,5,109,0,0,123,124,5,117,0,0,124,125,5,108,0,0,
        125,126,1,0,0,0,126,127,3,9,4,0,127,128,5,36,0,0,128,129,7,5,0,0,
        129,130,7,4,0,0,130,134,5,44,0,0,131,133,3,9,4,0,132,131,1,0,0,0,
        133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,
        136,134,1,0,0,0,137,138,5,36,0,0,138,139,7,5,0,0,139,140,7,4,0,0,
        140,144,5,44,0,0,141,143,3,9,4,0,142,141,1,0,0,0,143,146,1,0,0,0,
        144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,
        147,148,5,36,0,0,148,149,7,5,0,0,149,150,7,4,0,0,150,22,1,0,0,0,
        151,152,5,115,0,0,152,153,5,117,0,0,153,154,5,98,0,0,154,155,1,0,
        0,0,155,156,3,9,4,0,156,157,5,36,0,0,157,158,7,5,0,0,158,159,7,4,
        0,0,159,163,5,44,0,0,160,162,3,9,4,0,161,160,1,0,0,0,162,165,1,0,
        0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,
        0,0,166,167,5,36,0,0,167,168,7,5,0,0,168,169,7,4,0,0,169,173,5,44,
        0,0,170,172,3,9,4,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,
        0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,5,36,
        0,0,177,178,7,5,0,0,178,179,7,4,0,0,179,24,1,0,0,0,180,181,5,97,
        0,0,181,182,5,100,0,0,182,183,5,100,0,0,183,184,5,105,0,0,184,185,
        1,0,0,0,185,186,3,9,4,0,186,187,5,36,0,0,187,188,7,5,0,0,188,189,
        7,4,0,0,189,193,5,44,0,0,190,192,3,9,4,0,191,190,1,0,0,0,192,195,
        1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,
        1,0,0,0,196,197,5,36,0,0,197,198,7,5,0,0,198,199,7,4,0,0,199,203,
        5,44,0,0,200,202,3,9,4,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,206,208,
        7,4,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,
        1,0,0,0,210,26,1,0,0,0,211,212,5,97,0,0,212,213,5,100,0,0,213,214,
        5,100,0,0,214,215,1,0,0,0,215,216,3,9,4,0,216,217,5,36,0,0,217,218,
        7,5,0,0,218,219,7,4,0,0,219,223,5,44,0,0,220,222,3,9,4,0,221,220,
        1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,
        1,0,0,0,225,223,1,0,0,0,226,227,5,36,0,0,227,228,7,5,0,0,228,229,
        7,4,0,0,229,233,5,44,0,0,230,232,3,9,4,0,231,230,1,0,0,0,232,235,
        1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,
        1,0,0,0,236,237,5,36,0,0,237,238,7,5,0,0,238,239,7,4,0,0,239,28,
        1,0,0,0,240,245,3,21,10,0,241,245,3,23,11,0,242,245,3,25,12,0,243,
        245,3,27,13,0,244,240,1,0,0,0,244,241,1,0,0,0,244,242,1,0,0,0,244,
        243,1,0,0,0,245,30,1,0,0,0,246,247,5,98,0,0,247,248,5,101,0,0,248,
        249,5,113,0,0,249,250,1,0,0,0,250,251,3,9,4,0,251,252,5,36,0,0,252,
        253,7,5,0,0,253,254,7,4,0,0,254,258,5,44,0,0,255,257,3,9,4,0,256,
        255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
        261,1,0,0,0,260,258,1,0,0,0,261,262,5,36,0,0,262,263,7,5,0,0,263,
        264,7,4,0,0,264,268,5,44,0,0,265,267,3,9,4,0,266,265,1,0,0,0,267,
        270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,272,1,0,0,0,270,
        268,1,0,0,0,271,273,7,2,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,
        272,1,0,0,0,274,275,1,0,0,0,275,32,1,0,0,0,276,277,5,108,0,0,277,
        278,5,105,0,0,278,279,1,0,0,0,279,280,3,9,4,0,280,281,5,36,0,0,281,
        282,7,5,0,0,282,283,7,4,0,0,283,287,5,44,0,0,284,286,3,9,4,0,285,
        284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,
        291,1,0,0,0,289,287,1,0,0,0,290,292,7,4,0,0,291,290,1,0,0,0,292,
        293,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,34,1,0,0,0,295,296,
        5,108,0,0,296,297,5,97,0,0,297,298,1,0,0,0,298,299,3,9,4,0,299,300,
        5,36,0,0,300,301,7,5,0,0,301,302,7,4,0,0,302,306,5,44,0,0,303,305,
        3,9,4,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,309,311,7,2,0,0,310,309,
        1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,36,1,
        0,0,0,314,315,5,108,0,0,315,316,5,119,0,0,316,317,1,0,0,0,317,318,
        3,9,4,0,318,319,5,36,0,0,319,320,7,5,0,0,320,321,7,4,0,0,321,325,
        5,44,0,0,322,324,3,9,4,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,
        1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,330,
        7,2,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,
        1,0,0,0,332,38,1,0,0,0,333,334,5,115,0,0,334,335,5,119,0,0,335,336,
        1,0,0,0,336,337,3,9,4,0,337,338,5,36,0,0,338,339,7,5,0,0,339,340,
        7,4,0,0,340,344,5,44,0,0,341,343,3,9,4,0,342,341,1,0,0,0,343,346,
        1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,348,1,0,0,0,346,344,
        1,0,0,0,347,349,7,2,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,348,
        1,0,0,0,350,351,1,0,0,0,351,40,1,0,0,0,352,358,3,31,15,0,353,358,
        3,33,16,0,354,358,3,35,17,0,355,358,3,37,18,0,356,358,3,39,19,0,
        357,352,1,0,0,0,357,353,1,0,0,0,357,354,1,0,0,0,357,355,1,0,0,0,
        357,356,1,0,0,0,358,42,1,0,0,0,359,360,5,106,0,0,360,362,3,9,4,0,
        361,363,7,6,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,
        364,365,1,0,0,0,365,44,1,0,0,0,31,0,74,82,86,93,102,104,112,134,
        144,163,173,193,203,209,223,233,244,258,268,274,287,293,306,312,
        325,331,344,350,357,364,1,6,0,0
    ]

class InterpreterLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WS = 5
    COMMENT = 6
    TAG = 7
    STRING = 8
    INTEGER = 9
    SYSCALL = 10
    R_OPERATION = 11
    I_OPERATION = 12
    J_OPERATION = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.asciiz'", "'.word'", "'.data'", "'.text'", "'syscall'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "TAG", "STRING", "INTEGER", "SYSCALL", "R_OPERATION", 
            "I_OPERATION", "J_OPERATION" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WS", "COMMENT", "TAG", 
                  "STRING", "INTEGER", "SYSCALL", "MUL", "SUB", "ADDI", 
                  "ADD", "R_OPERATION", "BEQ", "LI", "LA", "LW", "SW", "I_OPERATION", 
                  "J_OPERATION" ]

    grammarFileName = "Interpreter.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


